require 'dotenv'

# JS Environments

lane :set_js_env do |options|
  backup_file(path: 'environment/index.js')
  sh "cp ../environment/index.#{ENV['ENV']}.js ../environment/index.js"
end

before_all do |lane, options|
  Dotenv.load(".env.#{ENV['ENV']}.secret")
end

after_all do |lane, options|
  if File.exist?('../environment/index.js.back')
    restore_file(path: 'environment/index.js')
  end
end

error do |lane, exception, options|
  if File.exist?('../environment/index.js.back')
    restore_file(path: 'environment/index.js')
  end
end

# IOS

platform :ios do
  error do |lane, exception, options|
    path = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PLIST_PATH']}"
    if File.exist?("../#{path}.back")
      restore_file(path: path)
    end
  end

  lane :setup do |options|
    produce(
      app_name: ENV['IOS_APP_NAME'],
      skip_itc: true
    )
    match(shallow_clone: true)
  end

  lane :setup_push do
    pem
  end

  lane :build do |options|
    plist_full_path = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PLIST_PATH']}"
    set_js_env
    backup_file(path: plist_full_path)
    xcodeproj = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PROJECT_NAME']}.xcodeproj"
    xcworkspace = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PROJECT_NAME']}.xcworkspace"
    update_info_plist(
      xcodeproj: xcodeproj,
      plist_path: ENV['IOS_PLIST_PATH'],
      block: lambda { |plist|
        plist['CFBundleIdentifier'] = ENV['IOS_APP_ID']
        plist['CFBundleName'] = ENV['IOS_APP_NAME']
        plist['CFBundleDisplayName'] = ENV['IOS_APP_NAME']
        plist['CFBundleShortVersionString'] = ENV['IOS_VERSION']
        plist['CFBundleVersion'] = ENV['IOS_VERSION_BUILD_NUMBER']
      },
    )
    profile_env_name = "sigh_#{ENV['IOS_APP_ID']}_#{ENV['MATCH_TYPE']}_profile-name"
    gymOptions = ({
      silent: true,
      xcargs: "PROVISIONING_PROFILE_SPECIFIER='#{ENV[profile_env_name]}' DEVELOPMENT_TEAM='#{ENV['IOS_TEAM_ID']}'"
    }).merge(
      File.directory?("../#{xcworkspace}") ?
        {workspace: xcworkspace} :
        {project: xcodeproj}
    )
    gym(gymOptions)
    restore_file(path: plist_full_path)
  end

  lane :deploy_hockey do |options|
    hockey(
      notify: '0',
      ipa: ENV['IOS_IPA_PATH']
    )
  end

  lane :deploy do |options|
    setup
    build
    if ENV['DEPLOYMENT_PLATFORM'] === 'hockeyapp' then
      deploy_hockey
    else
      pilot(
        distribute_external: false,
        skip_waiting_for_build_processing: true
      )
    end
  end
end

#  ANDROID

platform :android do
  lane :build do |options|
    set_js_env
    gradle(
      task: "assembleRelease",
      project_dir: ENV['ANDROID_PROJECT_DIR']
    )
  end

  lane :deploy_hockey do |options|
    hockey(
      notify: '0',
      apk: ENV['ANDROID_APK_PATH']
    )
  end

  lane :deploy do |options|
    build
    if ENV['DEPLOYMENT_PLATFORM'] === 'hockeyapp' then
      deploy_hockey
    end
  end
end
